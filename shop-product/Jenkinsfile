def DOCKER_IMAGE_NAME = "192.168.219.104:5000/product"
def NAMEPSACE = "product"
def DATE = new Date();
def SLACK_CHANNEL = "project"

def notifyStarted(slackChannel) {
  slackSend(channel: "${slackChannel}", color: '#FFF00', message: "Deploy Started... Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})'  ")
}

def notifySuccessful(slackChannel) {
  slackSend(channel: "${slackChannel}", color: '#FFF00', message: "Deploy Successful! Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})'  ")
}

def notifyFailed(slackChannel) {
  slackSend(channel: "${slackChannel}", color: '#FFF00', message: "Deploy failed... Job '${env.JOB_NAME} [${env.BUILD_NUMBER}] (${env.BUILD_URL})'  ")
}

    pipeline {
        agent {
          kubernetes {
            idleMinutes 5
            yamlFile './shop-product/build-pod.yaml'
          }
        }

      stages {
        try{    

          stage('Start') {
            notifyStarted(SLACK_CHANNEL)
          }

          stage('Checkout') {
            steps {
              checkout scm  
            }
          }
          
          stage('Build') {
            steps {
              container('gradle') {
                sh "cd ./shop-product && gradle -x test build"
                //sh "chmod 777 ./shop-product/gradlew"
                //sh "./shop-product/gradlew build" 
              }
            }
          }

          stage('Docker Build') {
            steps {
              container('docker') {
                sh "cd ./shop-product/build/libs && docker build -f ../../dockerfile/Dockerfile -t ${DOCKER_IMAGE_NAME} ."
                //sh "cd ./shop-product/dockerfile && docker build -t ${DOCKER_IMAGE_NAME} ."
                sh "docker push ${DOCKER_IMAGE_NAME}"
              }
            }
          }

          stage('Run kubectl') {
            steps {
              container('k8s') {
                sh "kubectl get ns ${NAMEPSACE} || kubectl create ns ${NAMEPSACE}"

                sh "echo ${DATE}"
                sh "sed -i.bak 's#DATE_STRING#${DATE}#' ./shop-product/k8s/product.yaml" 

                sh "kubectl apply -f ./shop-product/k8s/product.yaml"
              }
            }
           }
          notifySuccessful(SLACK_CHANNEL)
        } catch(e) {
          currentBuild.result = "FAILED"
          notifyFailed(SLACK_CHANNEL)
        }
      } 
    }
